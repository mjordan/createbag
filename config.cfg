[Output]
# If 'create_bag_in' is set, the contents of the selected directory will
# be recursively copied into the specified path, and the Bag created there.
# The directory specified in this option will be created if it doesn't exist. 
# Note that since the Bag is created from the copy, checksums are generated
# for the copies, not the original files. Also note that if 'create_bag_in'
# is not set, the Bag is created *in place* (that is, the contents of the
# selected directory are rearranged into a Bag structure).
; create_bag_in =  C:\Users\Mark\Downloads\bags
create_bag_in = /tmp/createbag/bags

[UILabels]
# The value of these config options are used as the title of the main
# application window and the file chooser window.
main_window_title = Create Bag from a folder
file_chooser_window_title = Create a Bag - Choose a folder to create Bag from

[Shortcuts]
# Paths to directories listed here appear as shortcut icons within the file
# chooser dialog box. Provide a comma-separated list of any directory paths
# you want to appear in the file chooser.
; shortcuts = /tmp/, /home/mark/Documents/hacking/bagit
; shortcuts = C:\Users\Mark\Downloads

[Checksums]
# The bagit Python library produces md5 checksums if none is
# specified. If you want to use another algorithm, or more than
# one, define them here in a comma-separated list. Valid algorithms
# are md5, sha1, sha256, and sha512.
; algorithms = md5,sha1

[CustomTags]
# All tag: value pairs you define here will be added
# to bag-info.txt. The bagit Python library always adds
# Bag-Software-Agent, Bagging-Date, and Payload-Oxum.
# Note that auto-generated tags are enabled in the "Other"
# section below.
Contact-Name: Alfred E. Newman
External-Description: Some description would go here.

[AutogeneratedTags]
# Set this to True to add a 'Source-Directory' tag to bag-info.txt.
add_source_directory_tag = True
# Set this to True to add a 'Source-User' tag to bag-info.txt. The user
# ID is the user that the application is running under.
add_source_user_id_tag = True

